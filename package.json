{
	"name": "pico8code",
	"description": "An attempt at language support for PICO-8's Lua",
	"icon": "client/img/icon.png",
	"author": "Grenier CÃ©lestin",
	"license": "MIT",
	"version": "0.0.4",
	"repository": {
		"type": "git",
		"url": "https://github.com/PictElm/pico8code"
	},
	"publisher": "PictElm",
	"categories": [
		"Programming Languages",
		"Other"
	],
	"keywords": [
		"multi-root ready",
		"pico8"
	],
	"engines": {
		"vscode": "^1.43.0"
	},
	"activationEvents": [
		"onLanguage:pico8"
	],
	"main": "./client/out/extension",
	"contributes": {
		"languages": [
			{
				"id": "pico8",
				"aliases": [
					"pico-8",
					"PICO-8"
				],
				"firstLine": "^.*pico-8 cartridge.*",
				"extensions": [
					".p8"
				],
				"configuration": "./syntaxes/language-configuration.json",
				"icon": {
					"light": "./client/img/icon/p8fileformat-light.png",
					"dark": "./client/img/icon/p8fileformat-dark.png"
				}
			}
		],
		"grammars": [
			{
				"language": "pico8",
				"scopeName": "source.p8",
				"path": "./syntaxes/pico8.json"
			}
		],
		"snippets": [
			{
				"language": "pico8",
				"path": "./syntaxes/snippets.json"
			}
		],
		"configuration": {
			"type": "object",
			"title": "PICO-8 Code",
			"properties": {
				"pico8code.parse.dontBother": {
					"description": "When enabled, the extension will not try to parse files to generate diagnostic/typing/completion...",
					"enum": [
						"all",
						"no diagnostics",
						"only coloration"
					],
					"enumDescriptions": [
						"enable everything",
						"disable the diagnostics",
						"have only the coloration"
					],
					"default": "all"
				},
				"pico8code.parse.defaultApiVersion": {
					"description": "Version of the PICO-8 API to use when not found in the file header.",
					"enum": [
						"0.2.1",
						"0.2.2",
						"0.2.3",
						"0.2.4",
						"0.2.4c",
						"0.2.5"
					],
					"default": "0.2.4"
				},
				"pico8code.parse.preDefinedGlobals": {
					"markdownDescription": "Define an additional list of global variables. Each entry should be a valid Lua identifier followed by a type annotation.\nExamples:\n* `add: (number, number) -> number`\n* `window: { width: number, height: number }`\n* `prop: () -> string | number`\n* `size: () -> [number, number]`",
					"type": "array",
					"default": []
				},
				"pico8code.parse.ignoreP8scii": {
					"markdownDescription": "When checked, it will not process P8SCII escapes sequences.",
					"type": "boolean",
					"default": "true"
				}
			}
		},
		"commands": {
			"title": "PICO-8: Restart Language Server",
			"command": "pico8code.server.restart"
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run compile && node ./api/wiki_get.js",
		"compile": "tsc -b",
		"watch": "tsc -b -w",
		"postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
		"test": "echo '(sad no test...)'"
	},
	"devDependencies": {
		"@types/node": "^12.12.0",
		"@typescript-eslint/eslint-plugin": "^4.23.0",
		"@typescript-eslint/parser": "^4.23.0",
		"eslint": "^7.26.0",
		"typescript": "^4.3.2"
	}
}
